generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model User {
  id                  String               @id @default(cuid())
  name                String?
  email               String?              @unique
  emailVerified       DateTime?
  image               String?
  githubUsername      String?              @map("github_username")
  avatarUrl           String?              @map("avatar_url")
  followersCount      Int?                 @map("followers_count")
  audience_segment    String?
  accounts            Account[]
  chatSessions        ChatSession[]
  notifications       EmailNotification[]
  freeChapterRequests FreeChapterRequest[]
  leads               Lead[]
  purchases           Purchase[]
  sessions            Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
}

model Purchase {
  id              String   @id @default(cuid())
  userId          String?  @map("user_id")
  contentSlug     String   @map("content_slug")
  purchaseDate    DateTime @default(now()) @map("purchase_date")
  stripePaymentId String?  @map("stripe_payment_id")
  amount          Decimal?
  email           String?
  user            User?    @relation(fields: [userId], references: [id])

  @@unique([userId, contentSlug])
  @@unique([email, contentSlug])
  @@map("purchases")
}

model EmailNotification {
  id          String   @id @default(cuid())
  userId      String?  @map("user_id")
  email       String?
  contentSlug String   @map("content_slug")
  emailType   String   @map("email_type")
  sentAt      DateTime @default(now()) @map("sent_at")
  user        User?    @relation(fields: [userId], references: [id])

  @@unique([userId, contentSlug, emailType])
  @@unique([email, contentSlug, emailType])
  @@map("email_notifications")
}

model FreeChapterRequest {
  id            String    @id @default(cuid())
  userId        String?   @map("user_id")
  email         String
  productSlug   String    @map("product_slug")
  requestDate   DateTime  @default(now()) @map("request_date")
  fulfilled     Boolean   @default(false)
  fulfilledDate DateTime? @map("fulfilled_date")
  user          User?     @relation(fields: [userId], references: [id])

  @@unique([email, productSlug])
  @@index([email])
  @@index([productSlug])
  @@map("free_chapter_requests")
}

model VectorDatabase {
  id                     String   @id @default(cuid())
  name                   String   @unique
  logoId                 String
  description            String
  createdAt              DateTime @default(now()) @map("created_at")
  updatedAt              DateTime @updatedAt @map("updated_at")
  companyName            String   @map("company_name")
  companyFounded         Int      @map("company_founded")
  companyFunding         String   @map("company_funding")
  companyEmployees       Int      @map("company_employees")
  businessInfo           Json?    @map("business_info")
  performanceLatency     String   @map("performance_latency")
  performanceThroughput  String   @map("performance_throughput")
  performanceScalability String   @map("performance_scalability")
  queryLatencyMs         Int      @map("query_latency_ms")
  indexingSpeed          Int      @map("indexing_speed_vectors_per_sec")
  memoryUsageMb          Int      @map("memory_usage_mb")
  scalabilityScore       Int      @map("scalability_score")
  accuracyScore          Int      @map("accuracy_score")
  features               Json     @map("features")
  security               Json     @map("security")
  algorithms             Json     @map("algorithms")
  searchCapabilities     Json     @map("search_capabilities")
  aiCapabilities         Json     @map("ai_capabilities")
  deployment             Json?    @map("deployment")
  scalabilityInfo        Json?    @map("scalability_info")
  dataManagement         Json?    @map("data_management")
  vectorSimilaritySearch Json?    @map("vector_similarity_search")
  integrationApi         Json?    @map("integration_api")
  communityEcosystem     Json?    @map("community_ecosystem")
  pricing                Json?    @map("pricing")
  additionalFeatures     Json?    @map("additional_features")
  specificDetails        Json?    @map("specific_details")

  @@map("vector_databases")
}

model Lead {
  id              String    @id @default(cuid())
  userId          String?   @map("user_id")
  email           String?
  conversation    Json      @map("conversation")
  leadScore       Float     @map("lead_score")
  isPotentialLead Boolean   @default(true) @map("is_potential_lead")
  reasons         String[]  @map("reasons")
  topics          String[]  @map("topics")
  nextSteps       String[]  @map("next_steps")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  contactedAt     DateTime? @map("contacted_at")
  user            User?     @relation(fields: [userId], references: [id])

  @@map("leads")
}

model ChatSession {
  id        String        @id @default(cuid())
  userId    String?       @map("user_id")
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @updatedAt @map("updated_at")
  messages  ChatMessage[]
  user      User?         @relation(fields: [userId], references: [id])

  @@map("chat_sessions")
}

model ChatMessage {
  id        String      @id @default(cuid())
  sessionId String      @map("session_id")
  role      String
  content   String
  createdAt DateTime    @default(now()) @map("created_at")
  session   ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([sessionId])
  @@map("chat_messages")
}

model Tool {
  id                   String   @id @default(cuid())
  name                 String
  description          String
  logoUrl              String?  @map("logo_url")
  category             String
  pricing              String?
  websiteUrl           String   @map("website_url")
  githubUrl            String?  @map("github_url")
  openSource           Boolean? @map("open_source")
  apiAccess            Boolean? @map("api_access")
  documentationQuality String?  @map("documentation_quality")
  communitySize        String?  @map("community_size")
  lastUpdated          String?  @map("last_updated")
  features             String[]
  pros                 String[]
  cons                 String[]
  license              String?
  languages            String[]
  reviewCount          Int?     @map("review_count")
  reviewUrl            String?  @map("review_url")
  createdAt            DateTime @default(now()) @map("created_at")
  updatedAt            DateTime @updatedAt @map("updated_at")

  @@map("tools")
}

model Newsletter {
  id                   String    @id @default(cuid())
  slug                 String    @unique
  title                String
  description          String?   @db.Text

  // Status workflow: draft -> scheduled -> sent
  status               String    @default("draft") // draft, scheduled, sent

  // Content
  bulletPoints         String[]  @default([]) // AI expansion source
  contentMdx           String?   @db.Text // Full MDX content
  contentHtml          String?   @db.Text // Compiled HTML

  // Resend integration
  resendBroadcastId    String?   @unique @map("resend_broadcast_id")
  resendAudienceId     String?   @map("resend_audience_id")

  // Scheduling & tracking
  scheduledAt          DateTime? @map("scheduled_at")
  sentAt               DateTime? @map("sent_at")
  publishedAt          DateTime? @map("published_at")

  // Analytics (synced from Resend webhooks)
  emailsSent           Int       @default(0) @map("emails_sent")
  emailsDelivered      Int       @default(0) @map("emails_delivered")
  emailsOpened         Int       @default(0) @map("emails_opened")
  emailsClicked        Int       @default(0) @map("emails_clicked")
  emailsBounced        Int       @default(0) @map("emails_bounced")

  createdAt            DateTime  @default(now()) @map("created_at")
  updatedAt            DateTime  @updatedAt @map("updated_at")

  @@index([status, scheduledAt])
  @@index([sentAt])
  @@map("newsletters")
}

model NewsletterSubscription {
  id                   String    @id @default(cuid())
  email                String    @unique
  firstName            String?   @map("first_name")
  lastName             String?   @map("last_name")
  status               String    @default("PENDING") // PENDING, SUBSCRIBED, UNSUBSCRIBED, BOUNCED
  source               String?   @default("website")

  // Resend integration
  resendContactId      String?   @unique @map("resend_contact_id")

  subscribedAt         DateTime? @map("subscribed_at")
  unsubscribedAt       DateTime? @map("unsubscribed_at")
  lastSyncedAt         DateTime? @map("last_synced_at")
  createdAt            DateTime  @default(now()) @map("created_at")
  updatedAt            DateTime  @updatedAt @map("updated_at")

  @@index([email, status])
  @@index([status])
  @@map("newsletter_subscriptions")
}

model NewsletterExpansion {
  id                   String    @id @default(cuid())
  newsletterId         String    @map("newsletter_id")
  bulletPoints         String[]
  expandedContent      String    @db.Text
  model                String    @default("claude-sonnet-4") // Track which AI model
  tokensUsed           Int?      @map("tokens_used")
  createdAt            DateTime  @default(now()) @map("created_at")

  @@index([newsletterId])
  @@map("newsletter_expansions")
}
