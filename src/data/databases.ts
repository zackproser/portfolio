import type { Database } from "@/types/database"

export const databases: Database[] = [
  {
    id: "pinecone",
    name: "Pinecone",
    logoId: "pinecone",
    description: "A vector database for building high-performance vector search applications",
    company: {
      name: "Pinecone Systems",
      founded: 2019,
      funding: "$138M",
      employees: 100,
    },
    features: {
      cloudNative: true,
      serverless: true,
      hybridSearch: true,
      metadataFiltering: true,
      batchOperations: true,
    },
    performance: {
      latency: "10ms",
      throughput: "100k qps",
      scalability: "auto",
    },
    security: {
      encryption: true,
      authentication: true,
      accessControl: true,
      auditLogging: true,
    },
    algorithms: {
      hnsw: true,
      ivf: true,
      lsh: false,
      quantization: true,
    },
    searchCapabilities: {
      similaritySearch: true,
      hybridSearch: true,
      filtering: true,
      pagination: true,
    },
    aiCapabilities: {
      features: {
        embeddingGeneration: true,
        llmIntegration: true,
        ragSupport: true,
        semanticCaching: true,
        modelHosting: false,
        fineTuning: false,
      },
      scores: {
        llmIntegration: 9,
        embeddingGeneration: 8,
        ragSupport: 9,
        fineTuning: 3,
        modelHosting: 2,
      },
      supportedModels: {
        openai: true,
        huggingface: true,
        pytorch: true,
        tensorflow: true,
        langchain: true,
        llamaindex: true,
      },
      ragFeatures: [
        "Semantic search",
        "Metadata filtering",
        "Hybrid search",
        "Real-time updates",
        "Batch operations",
      ],
      ragLimitations: [
        "No built-in fine-tuning",
        "Limited model hosting",
        "No built-in caching",
      ],
    },
  },
  {
    id: "weaviate",
    name: "Weaviate",
    logoId: "weaviate",
    description: "An open-source vector database that allows you to store data objects and vector embeddings",
    company: {
      name: "SeMI Technologies",
      founded: 2019,
      funding: "$50M",
      employees: 50,
    },
    features: {
      cloudNative: true,
      serverless: false,
      hybridSearch: true,
      metadataFiltering: true,
      batchOperations: true,
    },
    performance: {
      latency: "15ms",
      throughput: "50k qps",
      scalability: "manual",
    },
    security: {
      encryption: true,
      authentication: true,
      accessControl: true,
      auditLogging: true,
    },
    algorithms: {
      hnsw: true,
      ivf: true,
      lsh: true,
      quantization: true,
    },
    searchCapabilities: {
      similaritySearch: true,
      hybridSearch: true,
      filtering: true,
      pagination: true,
    },
    aiCapabilities: {
      features: {
        embeddingGeneration: true,
        llmIntegration: true,
        ragSupport: true,
        semanticCaching: true,
        modelHosting: true,
        fineTuning: true,
      },
      scores: {
        llmIntegration: 8,
        embeddingGeneration: 9,
        ragSupport: 8,
        fineTuning: 7,
        modelHosting: 8,
      },
      supportedModels: {
        openai: true,
        huggingface: true,
        pytorch: true,
        tensorflow: true,
        langchain: true,
        llamaindex: true,
      },
      ragFeatures: [
        "Semantic search",
        "Metadata filtering",
        "Hybrid search",
        "Real-time updates",
        "Batch operations",
        "Model hosting",
        "Fine-tuning support",
      ],
      ragLimitations: [
        "Complex setup",
        "Limited cloud options",
        "Steeper learning curve",
      ],
    },
  },
  {
    id: "milvus",
    name: "Milvus",
    logoId: "milvus",
    description: "An open-source vector database for scalable similarity search and AI applications",
    company: {
      name: "Zilliz",
      founded: 2019,
      funding: "$43M",
      employees: 100,
    },
    features: {
      cloudNative: true,
      serverless: false,
      hybridSearch: true,
      metadataFiltering: true,
      batchOperations: true,
    },
    performance: {
      latency: "5ms",
      throughput: "200k qps",
      scalability: "manual",
    },
    security: {
      encryption: true,
      authentication: true,
      accessControl: true,
      auditLogging: true,
    },
    algorithms: {
      hnsw: true,
      ivf: true,
      lsh: true,
      quantization: true,
    },
    searchCapabilities: {
      similaritySearch: true,
      hybridSearch: true,
      filtering: true,
      pagination: true,
    },
    aiCapabilities: {
      features: {
        embeddingGeneration: false,
        llmIntegration: true,
        ragSupport: true,
        semanticCaching: true,
        modelHosting: true,
        fineTuning: true,
      },
      scores: {
        llmIntegration: 7,
        embeddingGeneration: 4,
        ragSupport: 7,
        fineTuning: 6,
        modelHosting: 7,
      },
      supportedModels: {
        openai: true,
        huggingface: true,
        pytorch: true,
        tensorflow: true,
        langchain: true,
        llamaindex: true,
      },
      ragFeatures: [
        "Semantic search",
        "Metadata filtering",
        "Hybrid search",
        "Real-time updates",
        "Batch operations",
        "Model hosting",
        "Fine-tuning support",
      ],
      ragLimitations: [
        "No built-in embedding generation",
        "Complex deployment",
        "Limited documentation",
      ],
    },
  },
] 